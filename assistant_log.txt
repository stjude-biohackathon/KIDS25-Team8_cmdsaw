{'messages': [], 'executable': 'samtools', 'tool_info': {'tool': 'samtools', 'help_text': "Program: samtools (Tools for alignments in the SAM format)\nVersion: 1.13 (using htslib 1.13+ds)\n\nUsage:   samtools <command> [options]\n\nCommands:\n  -- Indexing\n     dict           create a sequence dictionary file\n     faidx          index/extract FASTA\n     fqidx          index/extract FASTQ\n     index          index alignment\n\n  -- Editing\n     calmd          recalculate MD/NM tags and '=' bases\n     fixmate        fix mate information\n     reheader       replace BAM header\n     targetcut      cut fosmid regions (for fosmid pool only)\n     addreplacerg   adds or replaces RG tags\n     markdup        mark duplicates\n     ampliconclip   clip oligos from the end of reads\n\n  -- File operations\n     collate        shuffle and group alignments by name\n     cat            concatenate BAMs\n     merge          merge sorted alignments\n     mpileup        multi-way pileup\n     sort           sort alignment file\n     split          splits a file by read group\n     quickcheck     quickly check if SAM/BAM/CRAM file appears intact\n     fastq          converts a BAM to a FASTQ\n     fasta          converts a BAM to a FASTA\n     import         Converts FASTA or FASTQ files to SAM/BAM/CRAM\n\n  -- Statistics\n     bedcov         read depth per BED region\n     coverage       alignment depth and percent coverage\n     depth          compute the depth\n     flagstat       simple stats\n     idxstats       BAM index stats\n     phase          phase heterozygotes\n     stats          generate stats (former bamcheck)\n     ampliconstats  generate amplicon specific stats\n\n  -- Viewing\n     flags          explain BAM flags\n     tview          text alignment viewer\n     view           SAM<->BAM<->CRAM conversion\n     depad          convert padded BAM to unpadded BAM\n\n  -- Misc\n     help [cmd]     display this help message or help for [cmd]\n     version        detailed version information", 'version_text': 'samtools 1.13\nUsing htslib 1.13+ds\nCopyright (C) 2021 Genome Research Ltd.\n\nSamtools compilation details:\n    Features:       build=configure curses=yes \n    CC:             gcc\n    CPPFLAGS:       -frelease  -Wdate-time -D_FORTIFY_SOURCE=2\n    CFLAGS:         -g -O2 -ffile-prefix-map=�BUILDPATH�=. -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security\n    LDFLAGS:        -Wl,-Bsymbolic-functions -flto=auto -Wl,-z,relro -Wl,-z,now\n    HTSDIR:         \n    LIBS:           \n    CURSES_LIB:     -lcurses\n\nHTSlib compilation details:\n    Features:       build=configure plugins=yes, plugin-path=/usr/local/lib/htslib:/usr/local/libexec/htslib:: libcurl=yes S3=yes GCS=yes libdeflate=yes lzma=yes bzip2=yes htscodecs=1.1.1\n    CC:             gcc\n    CPPFLAGS:       -I. -DSAMTOOLS=1 -Wdate-time -D_FORTIFY_SOURCE=2\n    CFLAGS:         -g -O2 -ffile-prefix-map=/build/htslib-TQtOKr/htslib-1.13+ds=. -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security -flto -fvisibility=hidden -flto -fvisibility=hidden\n    LDFLAGS:        -Wl,-Bsymbolic-functions -flto=auto -Wl,-z,relro -Wl,-z,now -Wl,-flto -fvisibility=hidden -Wl,-flto -fvisibility=hidden\n\nHTSlib URL scheme handlers present:\n    built-in:\t preload, data, file\n    crypt4gh-needed:\t crypt4gh\n    mem:\t mem', 'subcommands': [{'name': 'dict', 'description': 'create a sequence dictionary file', 'usage': 'samtools dict [options] <in.fa> <out.dict>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'faidx', 'description': 'index/extract FASTA', 'usage': 'samtools faidx [options] <in.fa> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': False, 'is_flag': False}]}, {'name': 'fqidx', 'description': 'index/extract FASTQ', 'usage': 'samtools fqidx [options] <in.fq> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': False, 'is_flag': False}]}, {'name': 'index', 'description': 'index alignment', 'usage': 'samtools index [options] <in.bam> [out.index]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': False, 'is_flag': False}]}, {'name': 'calmd', 'description': "recalculate MD/NM tags and '=' bases", 'usage': 'samtools calmd [options] <in.bam> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'fixmate', 'description': 'fix mate information', 'usage': 'samtools fixmate [options] <in.bam> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'reheader', 'description': 'replace BAM header', 'usage': 'samtools reheader [options] <in.bam> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'targetcut', 'description': 'cut fosmid regions (for fosmid pool only)', 'usage': 'samtools targetcut [options] <in.bam> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'addreplacerg', 'description': 'adds or replaces RG tags', 'usage': 'samtools addreplacerg [options] <in.bam> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'markdup', 'description': 'mark duplicates', 'usage': 'samtools markdup [options] <in.bam> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'ampliconclip', 'description': 'clip oligos from the end of reads', 'usage': 'samtools ampliconclip [options] <in.bam> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'collate', 'description': 'shuffle and group alignments by name', 'usage': 'samtools collate [options] <in.bam> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'cat', 'description': 'concatenate BAMs', 'usage': 'samtools cat [options] <in1.bam> <in2.bam> ... > out.bam', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'merge', 'description': 'merge sorted alignments', 'usage': 'samtools merge [options] <out.bam> <in1.bam> ...', 'parameters': [{'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'mpileup', 'description': 'multi-way pileup', 'usage': 'samtools mpileup [options] <in.bam> ... > out.mpileup', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'sort', 'description': 'sort alignment file', 'usage': 'samtools sort [options] <in.bam> > out.bam', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'split', 'description': 'splits a file by read group', 'usage': 'samtools split [options] <in.bam> > out.bam.rg.[rg].bam', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'quickcheck', 'description': 'quickly check if SAM/BAM/CRAM file appears intact', 'usage': 'samtools quickcheck [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'fastq', 'description': 'converts a BAM to a FASTQ', 'usage': 'samtools fastq [options] <in.bam> > out.fq', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'fasta', 'description': 'converts a BAM to a FASTA', 'usage': 'samtools fasta [options] <in.bam> > out.fa', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'import', 'description': 'Converts FASTA or FASTQ files to SAM/BAM/CRAM', 'usage': 'samtools import [options] <in.fa|in.fq> > out.sam|out.bam|out.cram', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'bedcov', 'description': 'read depth per BED region', 'usage': 'samtools bedcov [options] <in.bam> <regions.bed> > out.bed.gz', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'regions', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'coverage', 'description': 'alignment depth and percent coverage', 'usage': 'samtools coverage [options] <in.bam> > out.bed.gz', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'depth', 'description': 'compute the depth', 'usage': 'samtools depth [options] <in.bam> > out.bed.gz', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'flagstat', 'description': 'simple stats', 'usage': 'samtools flagstat [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'idxstats', 'description': 'BAM index stats', 'usage': 'samtools idxstats [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'phase', 'description': 'phase heterozygotes', 'usage': 'samtools phase [options] <in.bam> > out.vcf', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'stats', 'description': 'generate stats (former bamcheck)', 'usage': 'samtools stats [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'ampliconstats', 'description': 'generate amplicon specific stats', 'usage': 'samtools ampliconstats [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'flags', 'description': 'explain BAM flags', 'usage': 'samtools flags [options]', 'parameters': []}, {'name': 'tview', 'description': 'text alignment viewer', 'usage': 'samtools tview [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'view', 'description': 'SAM<->BAM<->CRAM conversion', 'usage': 'samtools view [options] <in.bam>|<in.sam>|<in.cram> [region ...]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'region', 'type': 'string', 'is_required': False, 'is_flag': False}]}, {'name': 'addreplacerg', 'description': 'adds or replaces RG tags', 'usage': 'samtools addreplacerg [options] <in.bam> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'markdup', 'description': 'mark duplicates', 'usage': 'samtools markdup [options] <in.bam> > out.bam', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'ampliconclip', 'description': 'clip oligos from the end of reads', 'usage': 'samtools ampliconclip [options] <in.bam> > out.bam', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'merge', 'description': 'merge sorted alignments', 'usage': 'samtools merge [options] <out.bam> <in1.bam> ...', 'parameters': [{'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'sort', 'description': 'sort alignment file', 'usage': 'samtools sort [options] <in.bam> > out.bam', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'split', 'description': 'splits a file by read group', 'usage': 'samtools split [options] <in.bam> > out.bam.rg.[rg].bam', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'quickcheck', 'description': 'quickly check if SAM/BAM/CRAM file appears intact', 'usage': 'samtools quickcheck [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'fastq', 'description': 'converts a BAM to a FASTQ', 'usage': 'samtools fastq [options] <in.bam> > out.fq', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'fasta', 'description': 'converts a BAM to a FASTA', 'usage': 'samtools fasta [options] <in.bam> > out.fa', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'import', 'description': 'Converts FASTA or FASTQ files to SAM/BAM/CRAM', 'usage': 'samtools import [options] <in.fa|in.fq> > out.sam|out.bam|out.cram', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'bedcov', 'description': 'read depth per BED region', 'usage': 'samtools bedcov [options] <in.bam> <regions.bed> > out.bed.gz', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'regions', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'coverage', 'description': 'alignment depth and percent coverage', 'usage': 'samtools coverage [options] <in.bam> > out.bed.gz', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'depth', 'description': 'compute the depth', 'usage': 'samtools depth [options] <in.bam> > out.bed.gz', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'flagstat', 'description': 'simple stats', 'usage': 'samtools flagstat [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'idxstats', 'description': 'BAM index stats', 'usage': 'samtools idxstats [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'phase', 'description': 'phase heterozygotes', 'usage': 'samtools phase [options] <in.bam> > out.vcf', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'stats', 'description': 'generate stats (former bamcheck)', 'usage': 'samtools stats [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'ampliconstats', 'description': 'generate amplicon specific stats', 'usage': 'samtools ampliconstats [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}], 'global_parameters': [], 'version': '1.13', 'description': 'Tools for alignments in the SAM format'}, 'parsed_subcommands': [{'name': 'dict', 'description': 'create a sequence dictionary file', 'usage': 'samtools dict [options] <in.fa> <out.dict>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'faidx', 'description': 'index/extract FASTA', 'usage': 'samtools faidx [options] <in.fa> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': False, 'is_flag': False}]}, {'name': 'fqidx', 'description': 'index/extract FASTQ', 'usage': 'samtools fqidx [options] <in.fq> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': False, 'is_flag': False}]}, {'name': 'index', 'description': 'index alignment', 'usage': 'samtools index [options] <in.bam> [out.index]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': False, 'is_flag': False}]}, {'name': 'calmd', 'description': "recalculate MD/NM tags and '=' bases", 'usage': 'samtools calmd [options] <in.bam> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'fixmate', 'description': 'fix mate information', 'usage': 'samtools fixmate [options] <in.bam> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'reheader', 'description': 'replace BAM header', 'usage': 'samtools reheader [options] <in.bam> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'targetcut', 'description': 'cut fosmid regions (for fosmid pool only)', 'usage': 'samtools targetcut [options] <in.bam> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'addreplacerg', 'description': 'adds or replaces RG tags', 'usage': 'samtools addreplacerg [options] <in.bam> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'markdup', 'description': 'mark duplicates', 'usage': 'samtools markdup [options] <in.bam> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'ampliconclip', 'description': 'clip oligos from the end of reads', 'usage': 'samtools ampliconclip [options] <in.bam> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'collate', 'description': 'shuffle and group alignments by name', 'usage': 'samtools collate [options] <in.bam> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'cat', 'description': 'concatenate BAMs', 'usage': 'samtools cat [options] <in1.bam> <in2.bam> ... > out.bam', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'merge', 'description': 'merge sorted alignments', 'usage': 'samtools merge [options] <out.bam> <in1.bam> ...', 'parameters': [{'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'mpileup', 'description': 'multi-way pileup', 'usage': 'samtools mpileup [options] <in.bam> ... > out.mpileup', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'sort', 'description': 'sort alignment file', 'usage': 'samtools sort [options] <in.bam> > out.bam', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'split', 'description': 'splits a file by read group', 'usage': 'samtools split [options] <in.bam> > out.bam.rg.[rg].bam', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'quickcheck', 'description': 'quickly check if SAM/BAM/CRAM file appears intact', 'usage': 'samtools quickcheck [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'fastq', 'description': 'converts a BAM to a FASTQ', 'usage': 'samtools fastq [options] <in.bam> > out.fq', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'fasta', 'description': 'converts a BAM to a FASTA', 'usage': 'samtools fasta [options] <in.bam> > out.fa', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'import', 'description': 'Converts FASTA or FASTQ files to SAM/BAM/CRAM', 'usage': 'samtools import [options] <in.fa|in.fq> > out.sam|out.bam|out.cram', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'bedcov', 'description': 'read depth per BED region', 'usage': 'samtools bedcov [options] <in.bam> <regions.bed> > out.bed.gz', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'regions', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'coverage', 'description': 'alignment depth and percent coverage', 'usage': 'samtools coverage [options] <in.bam> > out.bed.gz', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'depth', 'description': 'compute the depth', 'usage': 'samtools depth [options] <in.bam> > out.bed.gz', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'flagstat', 'description': 'simple stats', 'usage': 'samtools flagstat [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'idxstats', 'description': 'BAM index stats', 'usage': 'samtools idxstats [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'phase', 'description': 'phase heterozygotes', 'usage': 'samtools phase [options] <in.bam> > out.vcf', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'stats', 'description': 'generate stats (former bamcheck)', 'usage': 'samtools stats [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'ampliconstats', 'description': 'generate amplicon specific stats', 'usage': 'samtools ampliconstats [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'flags', 'description': 'explain BAM flags', 'usage': 'samtools flags [options]', 'parameters': []}, {'name': 'tview', 'description': 'text alignment viewer', 'usage': 'samtools tview [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'view', 'description': 'SAM<->BAM<->CRAM conversion', 'usage': 'samtools view [options] <in.bam>|<in.sam>|<in.cram> [region ...]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'region', 'type': 'string', 'is_required': False, 'is_flag': False}]}, {'name': 'addreplacerg', 'description': 'adds or replaces RG tags', 'usage': 'samtools addreplacerg [options] <in.bam> [out.bam]', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'markdup', 'description': 'mark duplicates', 'usage': 'samtools markdup [options] <in.bam> > out.bam', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'ampliconclip', 'description': 'clip oligos from the end of reads', 'usage': 'samtools ampliconclip [options] <in.bam> > out.bam', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'merge', 'description': 'merge sorted alignments', 'usage': 'samtools merge [options] <out.bam> <in1.bam> ...', 'parameters': [{'name': 'out', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'sort', 'description': 'sort alignment file', 'usage': 'samtools sort [options] <in.bam> > out.bam', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'split', 'description': 'splits a file by read group', 'usage': 'samtools split [options] <in.bam> > out.bam.rg.[rg].bam', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'quickcheck', 'description': 'quickly check if SAM/BAM/CRAM file appears intact', 'usage': 'samtools quickcheck [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'fastq', 'description': 'converts a BAM to a FASTQ', 'usage': 'samtools fastq [options] <in.bam> > out.fq', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'fasta', 'description': 'converts a BAM to a FASTA', 'usage': 'samtools fasta [options] <in.bam> > out.fa', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'import', 'description': 'Converts FASTA or FASTQ files to SAM/BAM/CRAM', 'usage': 'samtools import [options] <in.fa|in.fq> > out.sam|out.bam|out.cram', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'bedcov', 'description': 'read depth per BED region', 'usage': 'samtools bedcov [options] <in.bam> <regions.bed> > out.bed.gz', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}, {'name': 'regions', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'coverage', 'description': 'alignment depth and percent coverage', 'usage': 'samtools coverage [options] <in.bam> > out.bed.gz', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'depth', 'description': 'compute the depth', 'usage': 'samtools depth [options] <in.bam> > out.bed.gz', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'flagstat', 'description': 'simple stats', 'usage': 'samtools flagstat [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'idxstats', 'description': 'BAM index stats', 'usage': 'samtools idxstats [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'phase', 'description': 'phase heterozygotes', 'usage': 'samtools phase [options] <in.bam> > out.vcf', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'stats', 'description': 'generate stats (former bamcheck)', 'usage': 'samtools stats [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}, {'name': 'ampliconstats', 'description': 'generate amplicon specific stats', 'usage': 'samtools ampliconstats [options] <in.bam>', 'parameters': [{'name': 'in', 'type': 'string', 'is_required': True, 'is_flag': False}]}], 'standardized_tools': [{'id': 'samtools_dict', 'name': 'SAMTOOLS_DICT', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools dict --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_faidx', 'name': 'SAMTOOLS_FAIDX', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools faidx --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_fqidx', 'name': 'SAMTOOLS_FQIDX', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools fqidx --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_index', 'name': 'SAMTOOLS_INDEX', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools index --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_calmd', 'name': 'SAMTOOLS_CALMD', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools calmd --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_fixmate', 'name': 'SAMTOOLS_FIXMATE', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools fixmate --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_reheader', 'name': 'SAMTOOLS_REHEADER', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools reheader --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_targetcut', 'name': 'SAMTOOLS_TARGETCUT', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools targetcut --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_addreplacerg', 'name': 'SAMTOOLS_ADDREPLACERG', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools addreplacerg --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_markdup', 'name': 'SAMTOOLS_MARKDUP', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools markdup --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_ampliconclip', 'name': 'SAMTOOLS_AMPLICONCLIP', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools ampliconclip --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_collate', 'name': 'SAMTOOLS_COLLATE', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools collate --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_cat', 'name': 'SAMTOOLS_CAT', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools cat --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_merge', 'name': 'SAMTOOLS_MERGE', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools merge --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_mpileup', 'name': 'SAMTOOLS_MPILEUP', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools mpileup --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_sort', 'name': 'SAMTOOLS_SORT', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools sort --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_split', 'name': 'SAMTOOLS_SPLIT', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools split --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_quickcheck', 'name': 'SAMTOOLS_QUICKCHECK', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools quickcheck --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_fastq', 'name': 'SAMTOOLS_FASTQ', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools fastq --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_fasta', 'name': 'SAMTOOLS_FASTA', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools fasta --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_import', 'name': 'SAMTOOLS_IMPORT', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools import --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_bedcov', 'name': 'SAMTOOLS_BEDCOV', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools bedcov --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_coverage', 'name': 'SAMTOOLS_COVERAGE', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools coverage --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_depth', 'name': 'SAMTOOLS_DEPTH', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools depth --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_flagstat', 'name': 'SAMTOOLS_FLAGSTAT', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools flagstat --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_idxstats', 'name': 'SAMTOOLS_IDXSTATS', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools idxstats --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_phase', 'name': 'SAMTOOLS_PHASE', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools phase --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_stats', 'name': 'SAMTOOLS_STATS', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools stats --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_ampliconstats', 'name': 'SAMTOOLS_AMPLICONSTATS', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools ampliconstats --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_flags', 'name': 'SAMTOOLS_FLAGS', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools flags --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_tview', 'name': 'SAMTOOLS_TVIEW', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools tview --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_view', 'name': 'SAMTOOLS_VIEW', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [{'name': 'bam', 'suffix': '.bam', 'edam': 'format_2572', 'optional': True}, {'name': 'sam', 'suffix': '.sam', 'edam': 'format_2573', 'optional': True}], 'commands': 'samtools view --threads ${task.cpus} ${alignment} $args -o ${output_file} $input $args2'}, {'id': 'samtools_addreplacerg', 'name': 'SAMTOOLS_ADDREPLACERG', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools addreplacerg --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_markdup', 'name': 'SAMTOOLS_MARKDUP', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools markdup --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_ampliconclip', 'name': 'SAMTOOLS_AMPLICONCLIP', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools ampliconclip --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_merge', 'name': 'SAMTOOLS_MERGE', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools merge --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_sort', 'name': 'SAMTOOLS_SORT', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools sort --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_split', 'name': 'SAMTOOLS_SPLIT', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools split --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_quickcheck', 'name': 'SAMTOOLS_QUICKCHECK', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools quickcheck --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_fastq', 'name': 'SAMTOOLS_FASTQ', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools fastq --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_fasta', 'name': 'SAMTOOLS_FASTA', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools fasta --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_import', 'name': 'SAMTOOLS_IMPORT', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools import --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_bedcov', 'name': 'SAMTOOLS_BEDCOV', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools bedcov --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_coverage', 'name': 'SAMTOOLS_COVERAGE', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools coverage --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_depth', 'name': 'SAMTOOLS_DEPTH', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools depth --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_flagstat', 'name': 'SAMTOOLS_FLAGSTAT', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools flagstat --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_idxstats', 'name': 'SAMTOOLS_IDXSTATS', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools idxstats --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_phase', 'name': 'SAMTOOLS_PHASE', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools phase --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_stats', 'name': 'SAMTOOLS_STATS', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools stats --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_ampliconstats', 'name': 'SAMTOOLS_AMPLICONSTATS', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools ampliconstats --threads ${task.cpus} ${alignment} $args $input $args2'}]}
{'messages': [], 'executable': 'samtools', 'tool_info': {'tool': 'samtools', 'help_text': "Program: samtools (Tools for alignments in the SAM format)\nVersion: 1.13 (using htslib 1.13+ds)\n\nUsage:   samtools <command> [options]\n\nCommands:\n  -- Indexing\n     dict           create a sequence dictionary file\n     faidx          index/extract FASTA\n     fqidx          index/extract FASTQ\n     index          index alignment\n\n  -- Editing\n     calmd          recalculate MD/NM tags and '=' bases\n     fixmate        fix mate information\n     reheader       replace BAM header\n     targetcut      cut fosmid regions (for fosmid pool only)\n     addreplacerg   adds or replaces RG tags\n     markdup        mark duplicates\n     ampliconclip   clip oligos from the end of reads\n\n  -- File operations\n     collate        shuffle and group alignments by name\n     cat            concatenate BAMs\n     merge          merge sorted alignments\n     mpileup        multi-way pileup\n     sort           sort alignment file\n     split          splits a file by read group\n     quickcheck     quickly check if SAM/BAM/CRAM file appears intact\n     fastq          converts a BAM to a FASTQ\n     fasta          converts a BAM to a FASTA\n     import         Converts FASTA or FASTQ files to SAM/BAM/CRAM\n\n  -- Statistics\n     bedcov         read depth per BED region\n     coverage       alignment depth and percent coverage\n     depth          compute the depth\n     flagstat       simple stats\n     idxstats       BAM index stats\n     phase          phase heterozygotes\n     stats          generate stats (former bamcheck)\n     ampliconstats  generate amplicon specific stats\n\n  -- Viewing\n     flags          explain BAM flags\n     tview          text alignment viewer\n     view           SAM<->BAM<->CRAM conversion\n     depad          convert padded BAM to unpadded BAM\n\n  -- Misc\n     help [cmd]     display this help message or help for [cmd]\n     version        detailed version information", 'version_text': 'samtools 1.13\nUsing htslib 1.13+ds\nCopyright (C) 2021 Genome Research Ltd.\n\nSamtools compilation details:\n    Features:       build=configure curses=yes \n    CC:             gcc\n    CPPFLAGS:       -frelease  -Wdate-time -D_FORTIFY_SOURCE=2\n    CFLAGS:         -g -O2 -ffile-prefix-map=�BUILDPATH�=. -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security\n    LDFLAGS:        -Wl,-Bsymbolic-functions -flto=auto -Wl,-z,relro -Wl,-z,now\n    HTSDIR:         \n    LIBS:           \n    CURSES_LIB:     -lcurses\n\nHTSlib compilation details:\n    Features:       build=configure plugins=yes, plugin-path=/usr/local/lib/htslib:/usr/local/libexec/htslib:: libcurl=yes S3=yes GCS=yes libdeflate=yes lzma=yes bzip2=yes htscodecs=1.1.1\n    CC:             gcc\n    CPPFLAGS:       -I. -DSAMTOOLS=1 -Wdate-time -D_FORTIFY_SOURCE=2\n    CFLAGS:         -g -O2 -ffile-prefix-map=/build/htslib-TQtOKr/htslib-1.13+ds=. -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security -flto -fvisibility=hidden -flto -fvisibility=hidden\n    LDFLAGS:        -Wl,-Bsymbolic-functions -flto=auto -Wl,-z,relro -Wl,-z,now -Wl,-flto -fvisibility=hidden -Wl,-flto -fvisibility=hidden\n\nHTSlib URL scheme handlers present:\n    built-in:\t preload, data, file\n    crypt4gh-needed:\t crypt4gh\n    mem:\t mem', 'subcommands': [{'name': 'dict', 'description': 'create a sequence dictionary file', 'usage': 'samtools dict [options] <in.fasta>', 'parameters': [{'name': 'out', 'description': 'output dictionary file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'faidx', 'description': 'index/extract FASTA', 'usage': 'samtools faidx [options] <in.fasta>', 'parameters': [{'name': 'out', 'description': 'output index file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'fqidx', 'description': 'index/extract FASTQ', 'usage': 'samtools fqidx [options] <in.fastq>', 'parameters': [{'name': 'out', 'description': 'output index file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'index', 'description': 'index alignment', 'usage': 'samtools index [options] <in.bam> [out.index]', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'calmd', 'description': "recalculate MD/NM tags and '=' bases", 'usage': 'samtools calmd [options] <in.bam> [out.bam]', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'fixmate', 'description': 'fix mate information', 'usage': 'samtools fixmate [options] <in.bam> [out.bam]', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'reheader', 'description': 'replace BAM header', 'usage': 'samtools reheader [options] <in.bam> <new_header>', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'targetcut', 'description': 'cut fosmid regions (for fosmid pool only)', 'usage': 'samtools targetcut [options] <in.bam>', 'parameters': []}, {'name': 'addreplacerg', 'description': 'adds or replaces RG tags', 'usage': 'samtools addreplacerg [options] <in.bam> [out.bam]', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'markdup', 'description': 'mark duplicates', 'usage': 'samtools markdup [options] <in.bam> [out.bam]', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'ampliconclip', 'description': 'clip oligos from the end of reads', 'usage': 'samtools ampliconclip [options] <in.bam>', 'parameters': []}, {'name': 'collate', 'description': 'shuffle and group alignments by name', 'usage': 'samtools collate [options] <in.bam> <out.bam>', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'cat', 'description': 'concatenate BAMs', 'usage': 'samtools cat [options] <in1.bam> [<in2.bam> ...]', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'merge', 'description': 'merge sorted alignments', 'usage': 'samtools merge [options] <out.bam> <in1.bam> [<in2.bam> ...]', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'mpileup', 'description': 'multi-way pileup', 'usage': 'samtools mpileup [options] <in.bam>', 'parameters': []}, {'name': 'sort', 'description': 'sort alignment file', 'usage': 'samtools sort [options] <in.bam> <out.bam>', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'split', 'description': 'splits a file by read group', 'usage': 'samtools split [options] <in.bam>', 'parameters': []}, {'name': 'quickcheck', 'description': 'quickly check if SAM/BAM/CRAM file appears intact', 'usage': 'samtools quickcheck [options] <in.sam>|<in.bam>|<in.cram>', 'parameters': []}, {'name': 'fastq', 'description': 'converts a BAM to a FASTQ', 'usage': 'samtools fastq [options] <in.bam> [<out.fastq>]', 'parameters': [{'name': 'o', 'description': 'output file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'fasta', 'description': 'converts a BAM to a FASTA', 'usage': 'samtools fasta [options] <in.bam> [<out.fasta>]', 'parameters': [{'name': 'o', 'description': 'output file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'import', 'description': 'Converts FASTA or FASTQ files to SAM/BAM/CRAM', 'usage': 'samtools import [options] <in.fasta>|<in.fastq> [<out.bam>|<out.sam>|<out.cram>]', 'parameters': [{'name': 'o', 'description': 'output file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'bedcov', 'description': 'read depth per BED region', 'usage': 'samtools bedcov [options] <in.bam> <bedfile>', 'parameters': []}, {'name': 'coverage', 'description': 'alignment depth and percent coverage', 'usage': 'samtools coverage [options] <in.bam>', 'parameters': []}, {'name': 'depth', 'description': 'compute the depth', 'usage': 'samtools depth [options] <in.bam>', 'parameters': []}, {'name': 'flagstat', 'description': 'simple stats', 'usage': 'samtools flagstat [options] <in.bam>', 'parameters': []}, {'name': 'idxstats', 'description': 'BAM index stats', 'usage': 'samtools idxstats [options] <in.bam>', 'parameters': []}, {'name': 'phase', 'description': 'phase heterozygotes', 'usage': 'samtools phase [options] <in.bam>', 'parameters': []}, {'name': 'stats', 'description': 'generate stats (former bamcheck)', 'usage': 'samtools stats [options] <in.bam>', 'parameters': []}, {'name': 'ampliconstats', 'description': 'generate amplicon specific stats', 'usage': 'samtools ampliconstats [options] <in.bam>', 'parameters': []}, {'name': 'flags', 'description': 'explain BAM flags', 'usage': 'samtools flags [options]', 'parameters': []}, {'name': 'tview', 'description': 'text alignment viewer', 'usage': 'samtools tview [options] <in.bam>', 'parameters': []}, {'name': 'version', 'description': 'detailed version information', 'usage': '', 'parameters': []}], 'global_parameters': [], 'version': '1.13', 'description': 'Tools for alignments in the SAM format'}, 'parsed_subcommands': [{'name': 'dict', 'description': 'create a sequence dictionary file', 'usage': 'samtools dict [options] <in.fasta>', 'parameters': [{'name': 'out', 'description': 'output dictionary file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'faidx', 'description': 'index/extract FASTA', 'usage': 'samtools faidx [options] <in.fasta>', 'parameters': [{'name': 'out', 'description': 'output index file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'fqidx', 'description': 'index/extract FASTQ', 'usage': 'samtools fqidx [options] <in.fastq>', 'parameters': [{'name': 'out', 'description': 'output index file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'index', 'description': 'index alignment', 'usage': 'samtools index [options] <in.bam> [out.index]', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'calmd', 'description': "recalculate MD/NM tags and '=' bases", 'usage': 'samtools calmd [options] <in.bam> [out.bam]', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'fixmate', 'description': 'fix mate information', 'usage': 'samtools fixmate [options] <in.bam> [out.bam]', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'reheader', 'description': 'replace BAM header', 'usage': 'samtools reheader [options] <in.bam> <new_header>', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'targetcut', 'description': 'cut fosmid regions (for fosmid pool only)', 'usage': 'samtools targetcut [options] <in.bam>', 'parameters': []}, {'name': 'addreplacerg', 'description': 'adds or replaces RG tags', 'usage': 'samtools addreplacerg [options] <in.bam> [out.bam]', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'markdup', 'description': 'mark duplicates', 'usage': 'samtools markdup [options] <in.bam> [out.bam]', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'ampliconclip', 'description': 'clip oligos from the end of reads', 'usage': 'samtools ampliconclip [options] <in.bam>', 'parameters': []}, {'name': 'collate', 'description': 'shuffle and group alignments by name', 'usage': 'samtools collate [options] <in.bam> <out.bam>', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'cat', 'description': 'concatenate BAMs', 'usage': 'samtools cat [options] <in1.bam> [<in2.bam> ...]', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'merge', 'description': 'merge sorted alignments', 'usage': 'samtools merge [options] <out.bam> <in1.bam> [<in2.bam> ...]', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'mpileup', 'description': 'multi-way pileup', 'usage': 'samtools mpileup [options] <in.bam>', 'parameters': []}, {'name': 'sort', 'description': 'sort alignment file', 'usage': 'samtools sort [options] <in.bam> <out.bam>', 'parameters': [{'name': 'o', 'description': 'output BAM file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'split', 'description': 'splits a file by read group', 'usage': 'samtools split [options] <in.bam>', 'parameters': []}, {'name': 'quickcheck', 'description': 'quickly check if SAM/BAM/CRAM file appears intact', 'usage': 'samtools quickcheck [options] <in.sam>|<in.bam>|<in.cram>', 'parameters': []}, {'name': 'fastq', 'description': 'converts a BAM to a FASTQ', 'usage': 'samtools fastq [options] <in.bam> [<out.fastq>]', 'parameters': [{'name': 'o', 'description': 'output file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'fasta', 'description': 'converts a BAM to a FASTA', 'usage': 'samtools fasta [options] <in.bam> [<out.fasta>]', 'parameters': [{'name': 'o', 'description': 'output file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'import', 'description': 'Converts FASTA or FASTQ files to SAM/BAM/CRAM', 'usage': 'samtools import [options] <in.fasta>|<in.fastq> [<out.bam>|<out.sam>|<out.cram>]', 'parameters': [{'name': 'o', 'description': 'output file name (optional)'}, {'name': 'f', 'description': 'force overwriting of output file (optional)', 'is_flag': True}]}, {'name': 'bedcov', 'description': 'read depth per BED region', 'usage': 'samtools bedcov [options] <in.bam> <bedfile>', 'parameters': []}, {'name': 'coverage', 'description': 'alignment depth and percent coverage', 'usage': 'samtools coverage [options] <in.bam>', 'parameters': []}, {'name': 'depth', 'description': 'compute the depth', 'usage': 'samtools depth [options] <in.bam>', 'parameters': []}, {'name': 'flagstat', 'description': 'simple stats', 'usage': 'samtools flagstat [options] <in.bam>', 'parameters': []}, {'name': 'idxstats', 'description': 'BAM index stats', 'usage': 'samtools idxstats [options] <in.bam>', 'parameters': []}, {'name': 'phase', 'description': 'phase heterozygotes', 'usage': 'samtools phase [options] <in.bam>', 'parameters': []}, {'name': 'stats', 'description': 'generate stats (former bamcheck)', 'usage': 'samtools stats [options] <in.bam>', 'parameters': []}, {'name': 'ampliconstats', 'description': 'generate amplicon specific stats', 'usage': 'samtools ampliconstats [options] <in.bam>', 'parameters': []}, {'name': 'flags', 'description': 'explain BAM flags', 'usage': 'samtools flags [options]', 'parameters': []}, {'name': 'tview', 'description': 'text alignment viewer', 'usage': 'samtools tview [options] <in.bam>', 'parameters': []}, {'name': 'version', 'description': 'detailed version information', 'usage': '', 'parameters': []}], 'standardized_tools': [{'id': 'samtools_dict', 'name': 'SAMTOOLS_DICT', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools dict --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_faidx', 'name': 'SAMTOOLS_FAIDX', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools faidx --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_fqidx', 'name': 'SAMTOOLS_FQIDX', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools fqidx --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_index', 'name': 'SAMTOOLS_INDEX', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools index --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_calmd', 'name': 'SAMTOOLS_CALMD', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools calmd --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_fixmate', 'name': 'SAMTOOLS_FIXMATE', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools fixmate --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_reheader', 'name': 'SAMTOOLS_REHEADER', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools reheader --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_targetcut', 'name': 'SAMTOOLS_TARGETCUT', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools targetcut --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_addreplacerg', 'name': 'SAMTOOLS_ADDREPLACERG', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools addreplacerg --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_markdup', 'name': 'SAMTOOLS_MARKDUP', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools markdup --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_ampliconclip', 'name': 'SAMTOOLS_AMPLICONCLIP', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools ampliconclip --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_collate', 'name': 'SAMTOOLS_COLLATE', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools collate --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_cat', 'name': 'SAMTOOLS_CAT', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools cat --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_merge', 'name': 'SAMTOOLS_MERGE', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools merge --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_mpileup', 'name': 'SAMTOOLS_MPILEUP', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools mpileup --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_sort', 'name': 'SAMTOOLS_SORT', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools sort --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_split', 'name': 'SAMTOOLS_SPLIT', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools split --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_quickcheck', 'name': 'SAMTOOLS_QUICKCHECK', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools quickcheck --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_fastq', 'name': 'SAMTOOLS_FASTQ', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools fastq --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_fasta', 'name': 'SAMTOOLS_FASTA', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools fasta --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_import', 'name': 'SAMTOOLS_IMPORT', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools import --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_bedcov', 'name': 'SAMTOOLS_BEDCOV', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools bedcov --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_coverage', 'name': 'SAMTOOLS_COVERAGE', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools coverage --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_depth', 'name': 'SAMTOOLS_DEPTH', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools depth --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_flagstat', 'name': 'SAMTOOLS_FLAGSTAT', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools flagstat --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_idxstats', 'name': 'SAMTOOLS_IDXSTATS', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools idxstats --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_phase', 'name': 'SAMTOOLS_PHASE', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools phase --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_stats', 'name': 'SAMTOOLS_STATS', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools stats --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_ampliconstats', 'name': 'SAMTOOLS_AMPLICONSTATS', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools ampliconstats --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_flags', 'name': 'SAMTOOLS_FLAGS', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools flags --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_tview', 'name': 'SAMTOOLS_TVIEW', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools tview --threads ${task.cpus} ${alignment} $args $input $args2'}, {'id': 'samtools_version', 'name': 'SAMTOOLS_VERSION', 'label': 'process_low', 'inputs': [{'name': 'alignment', 'suffix': '.bam', 'edam': 'format_2572', 'optional': False}], 'outputs': [], 'commands': 'samtools version --threads ${task.cpus} ${alignment} $args $input $args2'}]}
{'messages': [], 'executable': 'samtools', 'tool_info': {'tool': 'samtools', 'help_text': "Program: samtools (Tools for alignments in the SAM format)\nVersion: 1.13 (using htslib 1.13+ds)\n\nUsage:   samtools <command> [options]\n\nCommands:\n  -- Indexing\n     dict           create a sequence dictionary file\n     faidx          index/extract FASTA\n     fqidx          index/extract FASTQ\n     index          index alignment\n\n  -- Editing\n     calmd          recalculate MD/NM tags and '=' bases\n     fixmate        fix mate information\n     reheader       replace BAM header\n     targetcut      cut fosmid regions (for fosmid pool only)\n     addreplacerg   adds or replaces RG tags\n     markdup        mark duplicates\n     ampliconclip   clip oligos from the end of reads\n\n  -- File operations\n     collate        shuffle and group alignments by name\n     cat            concatenate BAMs\n     merge          merge sorted alignments\n     mpileup        multi-way pileup\n     sort           sort alignment file\n     split          splits a file by read group\n     quickcheck     quickly check if SAM/BAM/CRAM file appears intact\n     fastq          converts a BAM to a FASTQ\n     fasta          converts a BAM to a FASTA\n     import         Converts FASTA or FASTQ files to SAM/BAM/CRAM\n\n  -- Statistics\n     bedcov         read depth per BED region\n     coverage       alignment depth and percent coverage\n     depth          compute the depth\n     flagstat       simple stats\n     idxstats       BAM index stats\n     phase          phase heterozygotes\n     stats          generate stats (former bamcheck)\n     ampliconstats  generate amplicon specific stats\n\n  -- Viewing\n     flags          explain BAM flags\n     tview          text alignment viewer\n     view           SAM<->BAM<->CRAM conversion\n     depad          convert padded BAM to unpadded BAM\n\n  -- Misc\n     help [cmd]     display this help message or help for [cmd]\n     version        detailed version information", 'version_text': 'samtools 1.13\nUsing htslib 1.13+ds\nCopyright (C) 2021 Genome Research Ltd.\n\nSamtools compilation details:\n    Features:       build=configure curses=yes \n    CC:             gcc\n    CPPFLAGS:       -frelease  -Wdate-time -D_FORTIFY_SOURCE=2\n    CFLAGS:         -g -O2 -ffile-prefix-map=�BUILDPATH�=. -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security\n    LDFLAGS:        -Wl,-Bsymbolic-functions -flto=auto -Wl,-z,relro -Wl,-z,now\n    HTSDIR:         \n    LIBS:           \n    CURSES_LIB:     -lcurses\n\nHTSlib compilation details:\n    Features:       build=configure plugins=yes, plugin-path=/usr/local/lib/htslib:/usr/local/libexec/htslib:: libcurl=yes S3=yes GCS=yes libdeflate=yes lzma=yes bzip2=yes htscodecs=1.1.1\n    CC:             gcc\n    CPPFLAGS:       -I. -DSAMTOOLS=1 -Wdate-time -D_FORTIFY_SOURCE=2\n    CFLAGS:         -g -O2 -ffile-prefix-map=/build/htslib-TQtOKr/htslib-1.13+ds=. -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security -flto -fvisibility=hidden -flto -fvisibility=hidden\n    LDFLAGS:        -Wl,-Bsymbolic-functions -flto=auto -Wl,-z,relro -Wl,-z,now -Wl,-flto -fvisibility=hidden -Wl,-flto -fvisibility=hidden\n\nHTSlib URL scheme handlers present:\n    built-in:\t preload, data, file\n    crypt4gh-needed:\t crypt4gh\n    mem:\t mem', 'subcommands': [], 'global_parameters': [], 'error': 'LLM parsing failed: Expecting value: line 1 column 1 (char 0)'}}
{'messages': [], 'executable': 'samtools', 'tool_info': {'tool': 'samtools', 'help_text': "Program: samtools (Tools for alignments in the SAM format)\nVersion: 1.13 (using htslib 1.13+ds)\n\nUsage:   samtools <command> [options]\n\nCommands:\n  -- Indexing\n     dict           create a sequence dictionary file\n     faidx          index/extract FASTA\n     fqidx          index/extract FASTQ\n     index          index alignment\n\n  -- Editing\n     calmd          recalculate MD/NM tags and '=' bases\n     fixmate        fix mate information\n     reheader       replace BAM header\n     targetcut      cut fosmid regions (for fosmid pool only)\n     addreplacerg   adds or replaces RG tags\n     markdup        mark duplicates\n     ampliconclip   clip oligos from the end of reads\n\n  -- File operations\n     collate        shuffle and group alignments by name\n     cat            concatenate BAMs\n     merge          merge sorted alignments\n     mpileup        multi-way pileup\n     sort           sort alignment file\n     split          splits a file by read group\n     quickcheck     quickly check if SAM/BAM/CRAM file appears intact\n     fastq          converts a BAM to a FASTQ\n     fasta          converts a BAM to a FASTA\n     import         Converts FASTA or FASTQ files to SAM/BAM/CRAM\n\n  -- Statistics\n     bedcov         read depth per BED region\n     coverage       alignment depth and percent coverage\n     depth          compute the depth\n     flagstat       simple stats\n     idxstats       BAM index stats\n     phase          phase heterozygotes\n     stats          generate stats (former bamcheck)\n     ampliconstats  generate amplicon specific stats\n\n  -- Viewing\n     flags          explain BAM flags\n     tview          text alignment viewer\n     view           SAM<->BAM<->CRAM conversion\n     depad          convert padded BAM to unpadded BAM\n\n  -- Misc\n     help [cmd]     display this help message or help for [cmd]\n     version        detailed version information", 'version_text': 'samtools 1.13\nUsing htslib 1.13+ds\nCopyright (C) 2021 Genome Research Ltd.\n\nSamtools compilation details:\n    Features:       build=configure curses=yes \n    CC:             gcc\n    CPPFLAGS:       -frelease  -Wdate-time -D_FORTIFY_SOURCE=2\n    CFLAGS:         -g -O2 -ffile-prefix-map=�BUILDPATH�=. -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security\n    LDFLAGS:        -Wl,-Bsymbolic-functions -flto=auto -Wl,-z,relro -Wl,-z,now\n    HTSDIR:         \n    LIBS:           \n    CURSES_LIB:     -lcurses\n\nHTSlib compilation details:\n    Features:       build=configure plugins=yes, plugin-path=/usr/local/lib/htslib:/usr/local/libexec/htslib:: libcurl=yes S3=yes GCS=yes libdeflate=yes lzma=yes bzip2=yes htscodecs=1.1.1\n    CC:             gcc\n    CPPFLAGS:       -I. -DSAMTOOLS=1 -Wdate-time -D_FORTIFY_SOURCE=2\n    CFLAGS:         -g -O2 -ffile-prefix-map=/build/htslib-TQtOKr/htslib-1.13+ds=. -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security -flto -fvisibility=hidden -flto -fvisibility=hidden\n    LDFLAGS:        -Wl,-Bsymbolic-functions -flto=auto -Wl,-z,relro -Wl,-z,now -Wl,-flto -fvisibility=hidden -Wl,-flto -fvisibility=hidden\n\nHTSlib URL scheme handlers present:\n    built-in:\t preload, data, file\n    crypt4gh-needed:\t crypt4gh\n    mem:\t mem', 'subcommands': [], 'global_parameters': [], 'error': 'LLM parsing failed: Expecting value: line 618 column 3 (char 21271)'}}
